#!/usr/bin/env bash
# For development purposes, set BASEDIR to the full path of the kustom
# directory, e.g.  BASEDIR=/home/peterj/kustom go test
if [ "${BASEDIR}" != "" ]
then
  source ${BASEDIR}/plugin/fca.autodata.net/v1.1/parse-yaml.sh
  source ${BASEDIR}/plugin/fca.autodata.net/v1.1/thycotic.sh
  source ${BASEDIR}/plugin/fca.autodata.net/v1.1/encode.sh
  WORKING_DIR=${BASEDIR}
else
  source $(dirname $0)/../parse-yaml.sh
  source $(dirname $0)/../thycotic.sh
  source $(dirname $0)/../encode.sh
  WORKING_DIR=$(dirname $0)
fi

create_variables $1

if [[ "$(openssl version)" == "OpenSSL 3"* ]]
then
  MY_OPENSSL_OPTS=-legacy
fi
SECRET_ID="${secret}"
get_secret ${SECRET_ID} issued-pfx ssl-certificate > $WORKING_DIR/cert.pfx
KEY_PASSWORD=$(get_secret ${SECRET_ID} password ssl-certificate | sed -e 's/^"//' -e 's/"$//')
PUBLIC_CLIENT_CERTS=$(openssl pkcs12 ${MY_OPENSSL_OPTS} -in $WORKING_DIR/cert.pfx -clcerts -nokeys -nodes -password pass:"$KEY_PASSWORD" ${OPENSSL_OPTS} | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p')
PUBLIC_CA_CERTS=$(openssl pkcs12 ${MY_OPENSSL_OPTS} -in $WORKING_DIR/cert.pfx -cacerts -nokeys -nodes -password pass:"$KEY_PASSWORD" ${OPENSSL_OPTS} | sed -ne '/-BEGIN CERTIFICATE-/,/-END CERTIFICATE-/p')
PUBLIC_KEY=$(encode "${PUBLIC_CLIENT_CERTS}"$'\n'"${PUBLIC_CA_CERTS}")
PRIVATE_KEY=$(encode "$(openssl pkcs12 ${MY_OPENSSL_OPTS} -in $WORKING_DIR/cert.pfx -nocerts -nodes -password pass:$KEY_PASSWORD ${OPENSSL_OPTS} | openssl rsa -passin pass:$KEY_PASSWORD)")
rm $WORKING_DIR/cert.pfx

cat <<EOF | cat
apiVersion: v1
kind: Secret
metadata:
  name: "${metadata_name}"
  namespace: "${metadata_namespace}"
data:
  tls.crt: ${PUBLIC_KEY}
  tls.key: ${PRIVATE_KEY}
type: kubernetes.io/tls
EOF
