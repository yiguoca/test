#!/usr/bin/env bash

set -e

shift

if [[ $# -ne 3 ]]; then
#  echo "You need to provide cert-name, service-name and namespace as parameters"
  exit 1
fi


export CERT_NAME="$1"
export SERVICE_NAME="$2"
export NAMESPACE="$3"

export CERT_DIR="$(dirname "${BASH_SOURCE[0]}")"/.cert_cache
mkdir -p "${CERT_DIR}"

openssl req -nodes -new -x509 -keyout ${CERT_DIR}/ca.key -out ${CERT_DIR}/ca.crt -subj "/CN=Cookie-monster root cert" -days 365 &>/dev/null
openssl genrsa -out ${CERT_DIR}/webhook-server-tls.key 2048 &>/dev/null
openssl req -new -key ${CERT_DIR}/webhook-server-tls.key -subj "/CN=${SERVICE_NAME}.${NAMESPACE}.svc" -addext "subjectAltName=DNS:${SERVICE_NAME}.autodatacorp.org,DNS:${SERVICE_NAME}.${NAMESPACE}.svc,DNS:${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local" -out ${CERT_DIR}/webhook-server-tls.csr
# need to pass some ssl config to the crt generation
cat >${CERT_DIR}/ssl.conf << EOL
[ req_extensions ]
subjectAltName = @alt_names

[ alt_names ]
DNS.1   = ${SERVICE_NAME}.autodatacorp.org
DNS.2   = ${SERVICE_NAME}.${NAMESPACE}.svc
DNS.3   = ${SERVICE_NAME}.${NAMESPACE}.svc.cluster.local
EOL

openssl x509 -in ${CERT_DIR}/webhook-server-tls.csr -req -CA ${CERT_DIR}/ca.crt -CAkey ${CERT_DIR}/ca.key -CAcreateserial -out ${CERT_DIR}/webhook-server-tls.crt -days 365 -extensions req_extensions -extfile ${CERT_DIR}/ssl.conf &>/dev/null
export CA_PEM_B64=$(openssl base64 -A <${CERT_DIR}/ca.crt)

cat <<EOF | envsubst
apiVersion: admissionregistration.k8s.io/v1
kind: MutatingWebhookConfiguration
metadata:
  name: ${SERVICE_NAME}
webhooks:
  - name: ${SERVICE_NAME}.autodatacorp.org
    clientConfig:
      service:
        name: ${SERVICE_NAME}
        namespace: ${NAMESPACE}
        path: "/mutate"
      caBundle: ${CA_PEM_B64}
    rules:
      - operations: [ "CREATE" ]
        apiGroups: ["*"]
        apiVersions: ["v1"]
        resources: ["ingresses"]
    failurePolicy: Fail
    admissionReviewVersions: ["v1beta1"]
    sideEffects: None
    matchPolicy: Exact
    timeoutSeconds: 30
    namespaceSelector:
      matchExpressions:
        - { key: igorVersion, operator: Exists }

EOF
echo "---"

kubectl -n "$NAMESPACE" create secret tls ${CERT_NAME} --cert ${CERT_DIR}/webhook-server-tls.crt --key ${CERT_DIR}/webhook-server-tls.key -o yaml --dry-run=client

